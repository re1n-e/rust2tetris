use my_project::alu::*;

mod tests {
    use super::*;

    #[test]
    fn test_half_adder() {
        let test_cases = [
            (0 ,0, (0, 0)),
            (0 ,1, (1, 0)),
            (1 ,0, (1, 0)),
            (1 ,1, (0, 1)),
        ];

        for (a, b, expected) in test_cases {
            let result = half_adder(a, b);
            assert_eq!(result, expected);
        }
    }

    #[test]
    fn test_full_adder() {
        let test_cases = [
            (0 ,0, 0, (0, 0)),
            (0 ,0, 1, (1, 0)),
            (0 ,1, 0, (1, 0)),
            (0 ,1, 1, (0, 1)),
            (1 ,0, 0, (1, 0)),
            (1 ,0, 1, (0, 1)),
            (1 ,1, 0, (0, 1)),
            (1 ,1, 1, (1, 1)),
        ];

        for (a, b, cin , expected) in test_cases {
            let result = full_adder(a, b, cin);
            assert_eq!(result, expected);
        }
    }

    #[test]
    fn test_add_16() {
        let test_cases = [
            (vec![0u8; 16], vec![0u8; 16], vec![0u8; 16]),
            (vec![0u8; 16], vec![1u8; 16], vec![1u8; 16]),
            (vec![1u8; 16], vec![0u8; 16], vec![1u8; 16]),
            (vec![1u8; 16], vec![1u8; 16], vec![0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]),
            (vec![1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], vec![0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]),
            (vec![1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0], vec![0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0], vec![1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0]),
            (vec![0,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0], vec![0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1], vec![0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]),
        ];

        for (a, b, expected) in test_cases {
            let a_array: [u8; 16] = a.try_into().unwrap();
            let b_array: [u8; 16] = b.try_into().unwrap();
            let expected_array: [u8; 16] = expected.try_into().unwrap();

            let result = add_16(a_array, b_array);
            assert_eq!(result, expected_array);
        }
    }

    #[test]
    fn test_inc_16() {
        let test_cases  = [
            (vec![0u8; 16], vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
            (vec![1u8; 16], vec![0u8; 16]),
            (vec![1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], vec![0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]),
            (vec![1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1], vec![0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]),
        ];

        for (a, expectd) in test_cases {
            let a_array: [u8; 16] = a.try_into().unwrap();
            let expected_array: [u8; 16] = expectd.try_into().unwrap();

            let result = inc_16(a_array);
            assert_eq!(result, expected_array);
        }
    }

    #[test]
    fn test_alu() {
            let test_case = [
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 0, 1, 0, 1, 0, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 1, 1, 1, 1, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 1, 0, 1, 0, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 1, 1, 0, 0, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 0, 0, 0, 0, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 1, 1, 0, 1, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 0, 0, 0, 1, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 1, 1, 1, 1, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 0, 0, 1, 1, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1, 1, 1, 1, 1, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 0, 1, 1, 1, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 1, 1, 1, 0, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,1, 1, 0, 0, 1, 0, vec![0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 0, 0, 1, 0, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1, 0, 0, 1, 1, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 0, 1, 1, 1, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 0, 0, 0, 0, 0, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1, 0, 1, 0, 1, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0, 1, 0, 1, 0, vec![0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 1, 1, 1, 1, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 1, 0, 1, 0, vec![1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 1, 1, 0, 0, vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 0, 0, 0, 0, vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 1, 1, 0, 1, vec![0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 0, 0, 0, 1, vec![0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 1, 1, 1, 1, vec![1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 0, 0, 1, 1, vec![1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 1, 1, 1, 1, 1, vec![0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 0, 1, 1, 1, vec![0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 1, 1, 1, 0, vec![0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,1, 1, 0, 0, 1, 0, vec![0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 0, 0, 1, 0, vec![0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 1, 0, 0, 1, 1, vec![0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 0, 1, 1, 1, vec![0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1] ,0, 1),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0, 0, 0, 0, 0, vec![1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),
            (vec![1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,vec![1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0] ,0, 1, 0, 1, 0, 1, vec![1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0] ,0, 0),

        ];
        let mut i = 0;
        for(x, y, zx, nx, zy, ny, f, no, expected, zr, ng) in test_case {
            let x_array: [u8; 16] = x.try_into().unwrap();
            let y_array: [u8; 16] = y.try_into().unwrap();

            let expected_array: [u8; 16] = expected.try_into().unwrap();
            i += 1;
            println!("Executing test case {}", i);
            let result = alu(x_array, y_array, zx, nx, zy, ny, f, no);
            assert_eq!(result, (expected_array, zr, ng));
        }
    }
}